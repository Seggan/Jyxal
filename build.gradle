import org.objectweb.asm.ClassReader
import org.objectweb.asm.ClassWriter
import org.objectweb.asm.commons.ClassRemapper
import org.objectweb.asm.commons.Remapper

import java.nio.file.Files
import java.nio.file.Path as JPath
import java.util.regex.Pattern

plugins {
    id 'java'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'antlr'
}

group 'io.github.seggan.jyxal'
version '0.1.0'

mainClassName = 'io.github.seggan.jyxal.Main'

JPath dest = JPath.of("$buildDir/runtime-classes/")

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.ow2.asm:asm:9.2'
    implementation 'org.ow2.asm:asm-commons:9.2'
    implementation 'org.ow2.asm:asm-util:9.2'
    antlr 'org.antlr:antlr4:4.9.3'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
}

test {
    useJUnitPlatform()
    minHeapSize = "128m"
    maxHeapSize = "512m"
}

generateGrammarSource {
    maxHeapSize = "128m"
    JPath path = JPath.of("$buildDir/generated-src/antlr/main/io/github/seggan/jyxal/antlr")
    Files.createDirectories(path)
    doFirst {
        Files.createDirectories(path)
    }
    arguments += ["-lib", path.toAbsolutePath().toString(), '-visitor', '-no-listener', "-encoding", "UTF-8"]
}

compileJava {
    dependsOn generateGrammarSource

    sourceCompatibility = '17'
    targetCompatibility = '17'

    doLast {
        List<String> names = new ArrayList<>()
        String dir = "$buildDir/classes/java/main/io/github/seggan/jyxal/runtime"
        Pattern oldPackage = Pattern.compile("io/github/seggan/jyxal/runtime/")
        Pattern backslash = Pattern.compile("\\\\")
        Pattern dirPattern = Pattern.compile("^.*classes[/\\\\]java[/\\\\]main[/\\\\]io[/\\\\]github[/\\\\]seggan[/\\\\]jyxal[/\\\\]runtime[/\\\\]")
        Files.walk(JPath.of(dir)).forEach({
            if (Files.isRegularFile(it)) {
                String fname = dirPattern.matcher(it.toString()).replaceFirst("")
                names.add(backslash.matcher(fname).replaceAll("/"))

                ClassReader cr = new ClassReader(Files.readAllBytes(it))
                ClassWriter cw = new ClassWriter(cr, 0)
                ClassRemapper remapper = new ClassRemapper(cw, new Remapper() {
                    @Override
                    String map(String internalName) {
                        return oldPackage.matcher(internalName).replaceFirst("runtime/")
                    }
                })
                cr.accept(remapper, ClassReader.EXPAND_FRAMES)

                JPath out = dest.resolve(fname)
                JPath parent = out.getParent()
                if (!Files.exists(parent)) {
                    Files.createDirectories(parent)
                }
                Files.write(out, cw.toByteArray())
            }
        })

        names.add("dictLong.txt")
        names.add("dictShort.txt")

        Files.write(dest.resolve("runtime.list"), names)
    }
}

sourceSets {
    main {
        java {
            srcDir 'src/main/antlr'
        }
    }
    generated {
        java {
            srcDir "build/generated-src/antlr/main/"
        }
    }
}

sourceSets {
    main {
        java {
            srcDir 'src/main/antlr'
        }
    }
    generated {
        java {
            srcDir "build/generated-src/antlr/main/"
        }
    }
}

clean {
    delete "generated-src"
}

// copy and relocate the runtime into the resources
shadowJar {
    dependsOn test

    from(dest.toFile().path) {
        include "**/*.*"
    }

    for (File f : sourceSets.main.resources.srcDirs) {
        from(f) {
            include "**/*.*"
        }
    }

    from(rootDir) {
        include "LICENSE.txt"
    }

    archiveFileName = "Jyxal v${project.version}.jar"
}