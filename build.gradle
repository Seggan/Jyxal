import org.objectweb.asm.ClassReader
import org.objectweb.asm.ClassWriter
import org.objectweb.asm.commons.ClassRemapper
import org.objectweb.asm.commons.Remapper

import java.nio.file.Files
import java.nio.file.Path as JPath
import java.util.jar.JarEntry
import java.util.jar.JarInputStream
import java.util.regex.Pattern

plugins {
    id 'java'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'antlr'
    id 'org.jetbrains.kotlin.jvm' version '1.6.20-RC'
}

group 'io.github.seggan.jyxal'
version '0.3.0'

mainClassName = 'io.github.seggan.jyxal.Main'

JPath dest = JPath.of("$buildDir/runtime-classes/")

repositories {
    mavenCentral()
}

configurations {
    kotlinRuntime
}

dependencies {
    implementation 'org.ow2.asm:asm:9.2'
    implementation 'org.ow2.asm:asm-commons:9.2'
    implementation 'org.ow2.asm:asm-util:9.2'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.6.10'
    kotlinRuntime('org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.6.10') {
        transitive = false
    }
    antlr 'org.antlr:antlr4:4.9.3'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testImplementation "org.jetbrains.kotlin:kotlin-reflect:1.6.10"
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
}

test {
    useJUnitPlatform()
    minHeapSize = "128m"
    maxHeapSize = "512m"
}

generateGrammarSource {
    maxHeapSize = "128m"
    JPath path = JPath.of("$buildDir/generated-src/")
    JPath fullPath = path.resolve("antlr/main/io/github/seggan/jyxal/antlr/")
    Files.createDirectories(fullPath)
    doFirst {
        // gotta do this because antlr doesn't like the package name
        Files.walk(path)
                .filter(Files::isRegularFile)
                .filter(f -> !f.toString().endsWith(".tokens"))
                .forEach(File::delete)
        Files.createDirectories(fullPath)
    }
    arguments += ["-lib", fullPath.toAbsolutePath().toString(), '-visitor', '-no-listener', "-encoding", "UTF-8"]
}

compileJava {
    dependsOn generateGrammarSource

    sourceCompatibility = '17'
    targetCompatibility = '17'
}

sourceSets {
    main {
        java {
            srcDir 'src/main/antlr'
        }
        kotlin {
            srcDir 'src/main/kotlin'
        }
    }
    generated {
        java {
            srcDir "build/generated-src/antlr/main/"
        }
    }
}

task extractKoltinRuntime() {
    File f = configurations.kotlinRuntime.singleFile
    try (JarInputStream inputStream = new JarInputStream(new FileInputStream(f))) {
        JarEntry entry
        while ((entry = inputStream.getNextJarEntry()) != null) {
            if (entry.isDirectory() || !entry.getName().endsWith(".class")) {
                continue
            }
            JPath path = dest.resolve(entry.getName())
            JPath parent = path.getParent()
            if (!Files.exists(parent)) {
                Files.createDirectories(parent)
            }
            Files.write(path, inputStream.readAllBytes())
        }
    }
}

test {
    dependsOn extractKoltinRuntime

    doFirst {
        List<String> names = new ArrayList<>()
        names.addAll(rename("java", dest))
        names.addAll(rename("kotlin", dest))
        names.add("dictLong.txt")
        names.add("dictShort.txt")
        Files.write(dest.resolve("runtime.list"), names)
    }
}

clean {
    delete "generated-src"
}

// copy and relocate the runtime into the resources
shadowJar {
    dependsOn test

    from(dest.toFile().path) {
        include "**/*.*"
    }

    for (File f : sourceSets.main.resources.srcDirs) {
        from(f) {
            include "**/*.*"
        }
    }

    from(rootDir) {
        include "LICENSE.txt"
    }

    archiveFileName = "Jyxal v${project.version}.jar"
}
compileKotlin {
    dependsOn generateGrammarSource

    kotlinOptions {
        jvmTarget = "17"
        freeCompilerArgs += ["-Xno-param-assertions"]
    }
}

compileTestKotlin {
    dependsOn compileKotlin
    dependsOn generateTestGrammarSource

    kotlinOptions {
        jvmTarget = "17"
    }
}

List<String> rename(String lang, JPath dest) {
    List<String> names = new ArrayList<>()
    String dir = "$buildDir/classes/$lang/main/io/github/seggan/jyxal/runtime"
    Pattern oldPackage = Pattern.compile("io/github/seggan/jyxal/runtime/")
    Pattern backslash = Pattern.compile("\\\\")
    Pattern dirPattern = Pattern.compile("^.*classes[/\\\\]$lang[/\\\\]main[/\\\\]io[/\\\\]github[/\\\\]seggan[/\\\\]jyxal[/\\\\]runtime[/\\\\]")
    Files.walk(JPath.of(dir)).forEach({
        if (Files.isRegularFile(it)) {
            String fname = dirPattern.matcher(it.toString()).replaceFirst("")
            names.add(backslash.matcher(fname).replaceAll("/"))

            ClassReader cr = new ClassReader(Files.readAllBytes(it))
            ClassWriter cw = new ClassWriter(cr, 0)
            ClassRemapper remapper = new ClassRemapper(cw, new Remapper() {
                @Override
                String map(String internalName) {
                    return oldPackage.matcher(internalName).replaceFirst("runtime/")
                }
            })
            cr.accept(remapper, ClassReader.EXPAND_FRAMES)

            JPath out = dest.resolve(fname)
            JPath parent = out.getParent()
            if (!Files.exists(parent)) {
                Files.createDirectories(parent)
            }
            Files.write(out, cw.toByteArray())
        }
    })
    return names
}